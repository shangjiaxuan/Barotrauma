# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Build

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      target:
        required: true
        type: string

env:
  CI_DIR: 717a3c49-f5dc-42eb-b332-fcf2988d00e3
  TOOLS_DIR: c1c0ee3b-b22f-451f-b330-8f6337a38fd7
  PUBLICIZED_ASSEMBLIES: |
    Barotrauma.dll
    DedicatedServer.dll
  RELEASES: |
    windows:client:Windows/Client
    windows:server:Windows/Server
    linux:client:Linux/Client
    linux:server:Linux/Server
    mac:client:Mac/Client/Barotrauma.app/Contents/MacOS
    mac:server:Mac/Server
    windows:Deploy/bin/content/Windows
    linux:Deploy/bin/content/Linux
    mac:Deploy/bin/content/Mac

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          ref: ${{ inputs.target }}
          submodules: recursive

      - name: Setup .NET
        uses: actions/setup-dotnet@3447fd6a9f9e57506b15f895c5b76d3b197dc7c2 # v3.2.0
        with:
          dotnet-version: |
            6.0.x

      - name: Run deploy script
        run: |
          set -e
          shopt -s globstar nullglob
          shopt -u dotglob
          cd Deploy
          git apply < ./patches/disable-interactivity.diff
          git apply < ./patches/prevent-crash-on-missing-dir.diff
          ./DeployAll.sh
      
      - name: Publicize assemblies
        run: |
          set -e
          shopt -s globstar nullglob
          shopt -u dotglob

          # This converts a newline-separated (LF) list into a Bash array
          # NOTE: this doesn't discard the trailing LF that GitHub actions
          # append (which results in an extra entry in the array).
          lines_to_array() {
            IFS=$'\n' readarray -td $'\n' "$1" <<< "${!1}"
          }
  
          lines_to_array RELEASES
          
          tools_dir="$(realpath -m "$TOOLS_DIR")"
          mkdir -p "$tools_dir"

          dotnet tool install --tool-path "$tools_dir/asmpub" BepInEx.AssemblyPublicizer.Cli --version 0.4.1
  
          for i in "${!RELEASES[@]}"; do
            [[ -z "${RELEASES[i]}" ]] && continue
            (
              IFS=':' read platform publish_dir _rest <<< "${RELEASES[i]}"
              cd "$publish_dir"
              echo "Publicizing assemblies for $platform build"
              mkdir Publicized
              # XXX: assembly-publicizer supports processing assemblies in
              # parallel, but it aborts the entire process if it encounters
              # an invalid .NET assembly.
              parallel "$tools_dir/asmpub/assembly-publicizer" \
                {} -f --strip -o Publicized \
                ::: ${PUBLICIZED_ASSEMBLIES[@]}
            )
          done

      - name: Create tarball
        run: |
          mkdir -p "$CI_DIR"
          tar -czf "$CI_DIR/build.tar.gz" -C Deploy/bin/content .

      - name: Upload tarball
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: build
          path: ${{ env.CI_DIR }}/build.tar.gz
